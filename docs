 CONTRIBUTING.md:
# Contributing to Movie Maker

Thank you for considering contributing to the Movie Maker project! We welcome contributions from the community and are excited to have you join us.

## How to Contribute

1. **Fork the repository**: Click the "Fork" button at the top right of this repository to create a copy of the repository in your GitHub account.

2. **Clone your fork**: Clone your forked repository to your local machine using the following command:
    ```bash
    git clone https://github.com/your-username/movie-maker.git
    cd movie-maker
    ```

3. **Create a branch**: Create a new branch for your feature or bug fix:
    ```bash
    git checkout -b my-feature-branch
    ```

4. **Make your changes**: Implement your feature or bug fix. Ensure that your code adheres to the project's coding standards and passes all tests.

5. **Commit your changes**: Commit your changes with a clear and descriptive commit message:
    ```bash
    git add .
    git commit -m "Add new feature XYZ"
    ```

6. **Push to your fork**: Push your changes to your forked repository:
    ```bash
    git push origin my-feature-branch
    ```

7. **Create a pull request**: Open a pull request from your forked repository to the main repository. Provide a clear description of your changes and any relevant information.

## Code of Conduct

Please read and adhere to our [Code of Conduct](CODE_OF_CONDUCT.md) to ensure a welcoming and respectful environment for all contributors.

## Reporting Issues

If you encounter any issues or bugs, please [open an issue](https://github.com/siripuramvinodkumar/movie-maker/issues) on GitHub. Provide as much detail as possible, including steps to reproduce the issue and any relevant logs or screenshots.

## Development Guidelines

- Write clear, concise, and meaningful commit messages.
- Follow the project's coding standards and style guidelines.
- Write tests for new features and bug fixes.
- Ensure that all tests pass before submitting a pull request.

Thank you for contributing to Movie Maker!
API.md:
# Movie Maker API Documentation

This document provides an overview of the API endpoints available in the Movie Maker project. The API allows users to interact with the movie maker application programmatically.

## Base URL

The base URL for the API is:
```
http://localhost:8000/api
```

## Endpoints

### 1. Import Media

**Endpoint:** `/import`

**Method:** `POST`

**Description:** Import video and audio files to the project.

**Request Body:**
```json
{
  "media_type": "video",
  "file_path": "/path/to/media/file"
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Media imported successfully"
}
```

### 2. Cut Video

**Endpoint:** `/cut`

**Method:** `POST`

**Description:** Cut a video from a specified start time to end time.

**Request Body:**
```json
{
  "video_path": "/path/to/video/file",
  "start_time": 10,
  "end_time": 50
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Video cut successfully",
  "output_path": "/path/to/cut/video/file"
}
```

### 3. Trim Video

**Endpoint:** `/trim`

**Method:** `POST`

**Description:** Trim a video to the specified duration.

**Request Body:**
```json
{
  "video_path": "/path/to/video/file",
  "duration": 30
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Video trimmed successfully",
  "output_path": "/path/to/trimmed/video/file"
}
```

### 4. Merge Videos

**Endpoint:** `/merge`

**Method:** `POST`

**Description:** Merge multiple video files into a single output file.

**Request Body:**
```json
{
  "video_paths": ["/path/to/video1/file", "/path/to/video2/file"],
  "output_path": "/path/to/output/video/file"
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Videos merged successfully",
  "output_path": "/path/to/merged/video/file"
}
```

### 5. Add Background Music

**Endpoint:** `/add-music`

**Method:** `POST`

**Description:** Add background music to a video.

**Request Body:**
```json
{
  "video_path": "/path/to/video/file",
  "music_path": "/path/to/music/file",
  "output_path": "/path/to/output/video/file"
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Background music added successfully",
  "output_path": "/path/to/video/with/music/file"
}
```

### 6. Apply Filter

**Endpoint:** `/apply-filter`

**Method:** `POST`

**Description:** Apply a specified filter to a video.

**Request Body:**
```json
{
  "video_path": "/path/to/video/file",
  "filter_type": "grayscale",
  "output_path": "/path/to/output/video/file"
}
```

**Response:**
```json
{
  "status": "success",
  "message": "Filter applied successfully",
  "output_path": "/path/to/filtered/video/file"
}
```

## Error Handling

All endpoints return an error response with a status code and message in case of failure.

**Error Response:**
```json
{
  "status": "error",
  "message": "Detailed error message"
}
```

This concludes the API documentation for the Movie Maker project. For any questions or issues, please refer to the [CONTRIBUTING.md](CONTRIBUTING.md) file or open an issue on GitHub.
